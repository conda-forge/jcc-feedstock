Subject: [PATCH] added support for --generate
---
Index: jcc3/__main__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jcc3/__main__.py b/jcc3/__main__.py
--- a/jcc3/__main__.py	(revision 1915626)
+++ b/jcc3/__main__.py	(revision 1915627)
@@ -82,7 +82,12 @@
                               to 'client'.
 
   Actions:
-    --build                 - generate the wrapper and compile it
+    --generate              - generate the wrapper module and setup.py,
+                              compilation is to be run via:
+                                'python -m build -n -w'
+                              installation is to be run via:
+                                'python -m pip install dist/<wheel>'
+    --build                 - generate the wrapper module and compile it
     --compile               - recompile the (previously generated) module
     --install               - install the wrapper in the local site-packages
     --egg-info              - ask distutils setup() to generate egg info, and
@@ -97,7 +102,7 @@
     --wininst               - create an installer application for Microsoft
                               Windows
 
-  Other distutils/setuptools options (there are passed right through):
+  Other distutils/setuptools options (they are passed right through):
     --compiler COMPILER     - use COMPILER instead of the platform default
     --root ROOTDIR
     --install-dir INSTALLDIR
Index: jcc3/cpp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jcc3/cpp.py b/jcc3/cpp.py
--- a/jcc3/cpp.py	(revision 1915626)
+++ b/jcc3/cpp.py	(revision 1915627)
@@ -426,6 +426,7 @@
     vmargs = ['-Djava.awt.headless=true']
     moduleName = None
     modules = []
+    generate = False
     build = False
     install = False
     recompile = False
@@ -493,6 +494,9 @@
             elif arg == '--module':
                 i += 1
                 modules.append(args[i])
+            elif arg == '--generate':
+                from .python import compile
+                generate = True
             elif arg == '--build':
                 from .python import compile
                 build = True
@@ -618,7 +622,7 @@
             raise ValueError('module name not specified (use --python)')
         else:
             compile(env, os.path.dirname(args[0]), output, moduleName,
-                    install, dist, debug, jars, version,
+                    False, install, dist, debug, jars, version,
                     prefix, root, install_dir, home_dir, use_distutils,
                     shared, compiler, modules, wheel, wininst, find_jvm_dll,
                     arch, generics, resources, imports, use_full_names,
@@ -772,9 +776,9 @@
             module(out, allInOne, done, imports, cppdir, moduleName,
                    shared, generics, use_full_names)
             out.close()
-            if build or install or dist or egg_info:
+            if build or generate or install or dist or egg_info:
                 compile(env, os.path.dirname(args[0]), output, moduleName,
-                        install, dist, debug, jars, version,
+                        generate, install, dist, debug, jars, version,
                         prefix, root, install_dir, home_dir, use_distutils,
                         shared, compiler, modules, wheel, wininst, find_jvm_dll,
                         arch, generics, resources, imports, use_full_names,
Index: jcc3/python.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jcc3/python.py b/jcc3/python.py
--- a/jcc3/python.py	(revision 1915626)
+++ b/jcc3/python.py	(revision 1915627)
@@ -1588,7 +1588,8 @@
     line(out, 0, '}')
 
 
-def compile(env, jccPath, output, moduleName, install, dist, debug, jars,
+def compile(env, jccPath, output, moduleName,
+            generate, install, dist, debug, jars,
             version, prefix, root, install_dir, home_dir, use_distutils,
             shared, compiler, modules, wheel, wininst, find_jvm_dll, arch,
             generics, resources, imports, use_full_names, egg_info,
@@ -1871,23 +1872,40 @@
                 i += 1
         config_vars['CFLAGS'] = ' '.join(cflags)
 
-    print("extension args = %s" % args)
-    extensions = [Extension('.'.join([moduleName, extname]), **args)]
-    script_args.extend(extra_setup_args)
+    if generate:
+        out = open(os.path.join(".", "setup.py"), "w")
+        line(out, 0, 'from setuptools import setup, Extension')
+        line(out, 0, 'setup(')
+        line(out, 1, 'name="%s",', moduleName)
+        line(out, 1, 'packages=%s,', packages)
+        line(out, 1, 'package_dir={"%s": "%s"},', moduleName, modulePath)
+        line(out, 1, 'package_data={"%s": %s},', moduleName, package_data)
+        line(out, 1, 'ext_modules=[Extension("%s.%s",', moduleName, extname)
+        for arg, value in args.items():
+            line(out, 2, '%s=%s,', arg, value)
+        line(out, 1, ")],")
+        if version:
+            line(out, 1, 'version="%s",', version)
+        line(out, 1, 'zip_safe=False,')
+        line(out, 0, ')')
+        out.close()
+    else:
+        print("extension args = %s" % args)
+        extensions = [Extension('.'.join([moduleName, extname]), **args)]
+        script_args.extend(extra_setup_args)
 
-    args = {
-        'name': moduleName,
-        'packages': packages,
-        'package_dir': {moduleName: modulePath},
-        'package_data': {moduleName: package_data},
-        'ext_modules': extensions,
-        'script_args': script_args
-    }
-    if version:
-        args['version'] = version
-    if with_setuptools:
-        args['zip_safe'] = False
+        setup_args = {
+            'name': moduleName,
+            'packages': packages,
+            'package_dir': {moduleName: modulePath},
+            'package_data': {moduleName: package_data},
+            'ext_modules': extensions,
+            'script_args': script_args
+        }
+        if version:
+            setup_args['version'] = version
+        if with_setuptools:
+            setup_args['zip_safe'] = False
 
-    print("setup args = %s" % args)
-
-    setup(**args)
+            print("setup args = %s" % setup_args)
+            setup(**setup_args)
Index: jcc3/sources/jcc.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jcc3/sources/jcc.cpp b/jcc3/sources/jcc.cpp
--- a/jcc3/sources/jcc.cpp	(revision 1915626)
+++ b/jcc3/sources/jcc.cpp	(revision 1915627)
@@ -132,9 +132,10 @@
 
 static void add_option(char *name, const char *value, JavaVMOption *option)
 {
-    char *buf = (char *) malloc(strlen(name) + strlen(value) + 1);
+    size_t size = strlen(name) + strlen(value) + 1;
+    char *buf = (char *) malloc(size);
 
-    sprintf(buf, "%s%s", name, value);
+    snprintf(buf, size, "%s%s", name, value);
     option->optionString = buf;
 }
 
@@ -142,14 +143,15 @@
 static void add_paths(char *name, const char *p0, const char *p1,
                       JavaVMOption *option)
 {
+    size_t size = strlen(name) + strlen(p0) + strlen(p1) + 4;
 #if defined(_MSC_VER) || defined(__WIN32)
     char pathsep = ';';
 #else
     char pathsep = ':';
 #endif
-    char *buf = (char *) malloc(strlen(name) + strlen(p0) + strlen(p1) + 4);
+    char *buf = (char *) malloc(size);
 
-    sprintf(buf, "%s%s%c%s", name, p0, pathsep, p1);
+    snprintf(buf, size, "%s%s%c%s", name, p0, pathsep, p1);
     option->optionString = buf;
 }
 #endif
@@ -211,7 +213,7 @@
     uintmax_t hash = (uintmax_t) PyObject_Hash(arg);
     char buffer[hexdig + 1];
 
-    sprintf(buffer, "%0*" PRIxMAX, (int) hexdig, hash);
+    snprintf(buffer, sizeof(buffer), "%0*" PRIxMAX, (int) hexdig, hash);
     return PyUnicode_FromStringAndSize(buffer, hexdig);
 }
 #endif

