Index: jcc2/python.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jcc2/python.py	(revision 1857054)
+++ jcc2/python.py	(date 1555231876520)
@@ -745,9 +745,26 @@
         sequenceLenName, sequenceLenSig = sequence[0].split(':')
         sequenceGetName, sequenceGetSig = sequence[1].split(':')
 
+    def get_rang(typearray):
+        """
+        Gets the inheritance level for a list of items.
+
+        Returns:
+            rang level (0 to minus X)
+        """
+        rang = 0
+        if typearray:
+            for item in typearray:
+                item_depth = 0
+                while item.getSuperclass():  # Get single item depth
+                    item = item.getSuperclass()
+                    item_depth = item_depth - 1
+                rang = rang + item_depth
+        return rang
+
     for name, methods in allMethods:
         args, x, cardinality = methodargs(methods, superMethods)
-        sort(methods, key=lambda x: len(x.getParameterTypes()))
+        sort(methods, key=lambda x: (len(x.getParameterTypes()), get_rang(x.getParameterTypes()))) # Sort on both parameter length and order in class tree
         method = methods[0]
         modifiers = method.getModifiers()
         if name == 'iterator' and iteratorMethod is None:
Index: jcc3/python.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- jcc3/python.py	(revision 1857054)
+++ jcc3/python.py	(date 1555231876542)
@@ -732,9 +732,26 @@
         sequenceLenName, sequenceLenSig = sequence[0].split(':')
         sequenceGetName, sequenceGetSig = sequence[1].split(':')
 
+    def get_rang(typearray):
+        """
+        Gets the inheritance level for a list of items.
+
+        Returns:
+            rang level (0 to minus X)
+        """
+        rang = 0
+        if typearray:
+            for item in typearray:
+                item_depth = 0
+                while item.getSuperclass():  # Get single item depth
+                    item = item.getSuperclass()
+                    item_depth = item_depth - 1
+                rang = rang + item_depth
+        return rang
+
     for name, methods in allMethods:
         args, x, cardinality = methodargs(methods, superMethods)
-        methods.sort(key=lambda x: len(x.getParameterTypes()))
+        methods.sort(key=lambda x: (len(x.getParameterTypes()), get_rang(x.getParameterTypes()))) # Sort on both parameter length and order in class tree
         method = methods[0]
         modifiers = method.getModifiers()
         if name == 'iterator' and iteratorMethod is None:
